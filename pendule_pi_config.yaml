# Conversion coefficents for the encoders. This parameter is mandatory.
meters_per_step: 3.990566037735849e-05  # 0.846/21200
radians_per_step: 0.006283185307179587  # 2*M_PI/1000

# By default, the pendulum should read zero when in the downward position and PI
# when pointing upward. However, you might prefer a different convention, or
# simply ensure that the pendulum really stays at PI when it is manually
# balanced in the upward position. To achieve such result, the low level
# interface will subtract angle_offset from the "raw" reading. The parameter
# is optional and defaults to zero.
angle_offset: 0.0

# Safety distances to stop the pendulum, in meters. Both are mandatory.
safety_thresholds:
  # Minimum allowed distance from the switches. If violated, the interface
  # shuts-down. It should be positive. Negative values will be inverted.
  # Passing a zero is not illegal, but very unsafe.
  hard: 0.05
  # Minimum allowed distance from the hard safety threshold. If violated,
  # commands are zeroed. Giving a non-negative value in practice removes the
  # soft threshold (only the hard one will remain active).
  soft: 0.1

# Offsets to be applied to pwm commands. Both are mandatory and should be
# integers.
pwm_offsets:
  # When a negative pwm is requested, actually apply pwm-low. If low is
  # negative, zero is used instead.
  low: 10
  # When a positive pwm is requested, actually apply pwm+high. If high is
  # negative, zero is used instead.
  high: 10

# Control period in milliseconds (integer). Optional parameter, defaults to 20.
period_ms: 20

# Cutoff frequency, in Hz, used in filtering. It should be less than half the
# sampling frequency.
cutoff_frequency: 12.5

# Configuration of the sockets used to exchange information.
sockets:
  # Host to bind the connections. Optional, defaults to "*".
  host: *
  # Port to send the state to client applications. Optional, defaults to 10001.
  state_port: 10001
  # Port to receive commands from clients. Optional, defaults to 10002.
  command_port: 10002

# Configuration of GPIO pins for the different components. All pins are
# optional, with default values that corresponds to the connection layout
# illustrated in the documentation.
pins:
  motor:
    # Pin used to send PWM signals to the motor controller.
    pwm: 24
    # Pin used to invert the rotation direction of the motor.
    direction: 16
  # Pin used to detect if the left switch (encoder side) has been hit.
  left_switch: 17
  # Pin used to detect if the right switch (motor side) has been hit.
  right_switch: 18
  # Pins corresponding to the phases of the position encoder (the one connected
  # to the transmission belt).
  position_encoder:
    a: 20
    b: 21
  # Pins corresponding to the phases of the angle encoder (the one that act as
  # the pivot for the rod).
  angle_encoder:
    a: 19
    b: 26
