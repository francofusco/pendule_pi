#include <pendule_pi/config.hpp>

namespace pendule_pi {

std::string Config::getTemplate() {
  return std::string(
"# Conversion coefficents for the encoders. This parameter is mandatory.\n"
"meters_per_step: 3.990566037735849e-05  # 0.846/21200\n"
"radians_per_step: 0.006283185307179587  # 2*M_PI/1000\n"
"\n"
"# By default, the pendulum should read zero when in the downward position and PI\n"
"# when pointing upward. However, you might prefer a different convention, or\n"
"# simply ensure that the pendulum really stays at PI when it is manually\n"
"# balanced in the upward position. To achieve such result, the low level\n"
"# interface will subtract angle_offset from the \"raw\" reading. The parameter\n"
"# is optional and defaults to zero.\n"
"angle_offset: 0.0\n"
"\n"
"# Safety distances to stop the pendulum, in meters. Both are mandatory.\n"
"safety_thresholds:\n"
"# Minimum allowed distance from the switches. If violated, the interface\n"
"# shuts-down. It should be positive. Negative values will be inverted.\n"
"# Passing a zero is not illegal, but very unsafe.\n"
"hard: 0.05\n"
"# Minimum allowed distance from the hard safety threshold. If violated,\n"
"# commands are zeroed. Giving a non-negative value in practice removes the\n"
"# soft threshold (only the hard one will remain active).\n"
"soft: 0.1\n"
"\n"
"# Offsets to be applied to pwm commands. Both are mandatory and should be\n"
"# integers.\n"
"pwm_offsets:\n"
"# When a negative pwm is requested, actually apply pwm-low. If low is\n"
"# negative, zero is used instead.\n"
"low: 10\n"
"# When a positive pwm is requested, actually apply pwm+high. If high is\n"
"# negative, zero is used instead.\n"
"high: 10\n"
"\n"
"# Control period in milliseconds (integer). Optional parameter, defaults to 20.\n"
"period_ms: 20\n"

"# Cutoff frequency, in Hz, used in filtering. It should be less than half the\n"
"# sampling frequency.\n"
"cutoff_frequency: 12.5\n"
"\n"
"# Configuration of the sockets used to exchange information.\n"
"sockets:\n"
"# Host to bind the connections. Optional, defaults to \"*\".\n"
"host: \"*\"\n"
"# Port to send the state to client applications. Optional, defaults to 10001.\n"
"state_port: 10001\n"
"# Port to receive commands from clients. Optional, defaults to 10002.\n"
"command_port: 10002\n"
"\n"
"# Configuration of GPIO pins for the different components. All pins are\n"
"# optional, with default values that corresponds to the connection layout\n"
"# illustrated in the documentation.\n"
"pins:\n"
"motor:\n"
"  # Pin used to send PWM signals to the motor controller.\n"
"  pwm: 24\n"
"  # Pin used to invert the rotation direction of the motor.\n"
"  direction: 16\n"
"# Pin used to detect if the left switch (encoder side) has been hit.\n"
"left_switch: 17\n"
"# Pin used to detect if the right switch (motor side) has been hit.\n"
"right_switch: 18\n"
"# Pins corresponding to the phases of the position encoder (the one connected\n"
"# to the transmission belt).\n"
"position_encoder:\n"
"  a: 20\n"
"  b: 21\n"
"# Pins corresponding to the phases of the angle encoder (the one that act as\n"
"# the pivot for the rod).\n"
"angle_encoder:\n"
"  a: 19\n"
"  b: 26\n"
  );
}

} // pendule_pi
